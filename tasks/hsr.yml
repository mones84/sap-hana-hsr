---

#- name: Enable Debugging
#  debug:
#    verbosity: "{{ debuglevel }}"

# Need this to check if installed was finished
# TODO: Maybe change things to setfact module

- name: Create ansible facts directory
  file:
    path: "/etc/ansible/facts.d"
    state: directory
    recurse: yes


- name: create backup-directory
  file:
    path: "{{ item.value.hsr_backup_directory }}"
    state: directory
    owner: "{{ item.value.hana_sid|lower }}adm"
    group: sapsys
  with_dict: "{{ hsr }}"

- name: Create File for Scale-Out Enviornments
  template:
    src: hsr_create_backup.sh.j2
    dest: /usr/local/bin/hsr_create_backup_{{ item.value.hana_sid|lower }}.sh
    mode: 0755
  with_dict: "{{ hsr }}"

# Missing: sr_hostname_resolution


# Deploy Configuration-Scripts

- name: Deploy register Configuration-Scripts
  template:
    src: hsr_sr_register.sh.j2
    dest: /usr/local/bin/hsr_sr_register_{{ item.value.hana_sid|lower }}.sh
    mode: 0755
  with_dict: "{{ hsr }}"


- name: Deploy enable Configuration-Scripts
  template:
    src: hsr_sr_enable.sh.j2
    dest: /usr/local/bin/hsr_sr_enable_{{ item.value.hana_sid|lower }}.sh
    mode: 0755
  with_dict: "{{ hsr }}"

# Only execute once on one install host

- name: enable backup configuration
  shell: ./hsr_create_backup_{{ item.value.hana_sid|lower }}.sh
  args:
    chdir: "/usr/local/bin/"
    creates: /etc/ansible/facts.d/hsr_backup_configured_{{ item.value.hana_sid|lower }}.fact
  with_dict: "{{ hsr }}"
  when:
    - hsr_deploy_type is defined
    - hsr_deploy_type == "enable"

######################################################
# Get state of system replication
# The script provides the following return codes:
# 10: No System Replication
# 11: Error
# 12: Unknown
# 13: Initializing
# 14: Syncing
# 15: Active
#  
# Note: not used yet. But we should add to  execute ....
#
- name: get system-replication state
  shell: |
    su - "{{ item.value.hana_sid|lower }}adm" -c 'python  /usr/sap/{{ item.value.hana_sid|upper }}/HDB{{item.value.hana_instance_number}}/exe/python_support/systemReplicationStatus.py'
  register: srstate
  changed_when: false
  failed_when: ( srstate.rc < 10 ) or ( srstate.rc > 15 )
  with_dict: "{{ hsr }}"

## NOTE: srstate contains a list of return values for all cluster, so the following is only working for one cluster !!!
- name: debug replicationstate
  debug: 
    var: srstate
    verbosity: 2

- name: debug 
  debug: 
    msg: "{{ (srstate.results|first).stdout }}"
    verbosity: 2

############################
# This always need to be run first 
- name: execute enable system-replication
  shell: |
    /usr/bin/su - {{ item.value.hana_sid|lower }}adm -c "hdbnsutil -sr_enable --name={{ item.value.hsr_name }}"
  with_dict: "{{ hsr }}"
  register: sr_enable
  when: ( hsr_deploy_type is defined ) and ( hsr_deploy_type == "enable" ) and ( (srstate.results|first).stdout == "this system is not a system replication site" ) 

################################
# The steps on the secondaries need to wait for the first to be ready
# TODO: Wait for primary to have SR activated
# Don't know how to check this
#
- name: make sure local directory for collecting SR keyfiles exist
  become: false
  local_action: file path="{{ sap_hana_hsr_keyexchange_tmp }}" state=directory mode=0755 
  when:
    - hsr_deploy_type is defined
    - hsr_deploy_type == "enable"

#- name: make sure local directory for collecting SR keyfiles exist
#  become: false
#  local_action:
#    file:
#      path: "{{ sap_hana_hsr_keyexchange_tmp }}" 
#      state: directory 
#      mode: 0755 
#  when:
#    - hsr_deploy_type is defined
#    - hsr_deploy_type == "enable"

- name: fetch the remote dat 
  fetch:
    src: /usr/sap/{{ item.value.hana_sid|upper }}/SYS/global/security/rsecssfs/data/SSFS_{{ item.value.hana_sid|upper }}.DAT
    dest: "{{ sap_hana_hsr_keyexchange_tmp }}/SSFS_{{ item.value.hana_sid|upper }}.DAT"
    fail_on_missing: yes
    flat: yes
  with_dict: "{{ hsr }}"
  when:
    - hsr_deploy_type is defined
    - hsr_deploy_type == "enable"

- name: fetch the remote key 
  fetch:
    src: /usr/sap/{{ item.value.hana_sid|upper }}/SYS/global/security/rsecssfs/key/SSFS_{{ item.value.hana_sid|upper }}.KEY
    dest: "{{ sap_hana_hsr_keyexchange_tmp }}/SSFS_{{ item.value.hana_sid|upper }}.KEY"
    fail_on_missing: yes
    flat: yes
  with_dict: "{{ hsr }}"
  when:
    - hsr_deploy_type is defined
    - hsr_deploy_type == "enable"

- name: push datfile to secondary hosts
  copy:
    src: "{{ sap_hana_hsr_keyexchange_tmp }}/SSFS_{{ item.value.hana_sid|upper }}.DAT"
    dest: /usr/sap/{{ item.value.hana_sid|upper }}/SYS/global/security/rsecssfs/data/SSFS_{{ item.value.hana_sid|upper }}.DAT
    owner: "{{ item.value.hana_sid|lower }}adm"
    group: sapsys
    mode: 0644
  with_dict: "{{ hsr }}"
  when:
    - hsr_deploy_type is defined
    - hsr_deploy_type == "register"

- name: push keyfile to secondary hosts
  copy:
    src: "{{ sap_hana_hsr_keyexchange_tmp }}/SSFS_{{ item.value.hana_sid|upper }}.KEY"
    dest: /usr/sap/{{ item.value.hana_sid|upper }}/SYS/global/security/rsecssfs/key/SSFS_{{ item.value.hana_sid|upper }}.KEY
    owner: "{{ item.value.hana_sid|lower }}adm"
    group: sapsys
    mode: 0644
  with_dict: "{{ hsr }}"
  when:
    - hsr_deploy_type is defined
    - hsr_deploy_type == "register"

## Only execute once on one register host
- name: execute register system-replication
  shell: /usr/bin/su - {{ item.value.hana_sid|lower }}adm -c "/usr/local/bin/hsr_sr_register_{{ item.value.hana_sid|lower }}.sh"
  args:
    chdir: "/usr/local/bin"
    creates: /etc/ansible/facts.d/hsr_configured_{{ item.value.hana_sid|lower }}.fact
  with_dict: "{{ hsr }}"
  register: sr_register
  when:
    - hsr_deploy_type is defined
    - hsr_deploy_type == "register"

# Small workaround (did not created in the two executes before)
- name: Workaround for executes /etc/ansible/facts.d/hsr_configured_{{ item.value.hana_sid|lower }}.fact
  file:
    path: /etc/ansible/facts.d/hsr_configured_{{ item.value.hana_sid|lower }}.fact
    state: touch
  with_dict: "{{ hsr }}"
  when:
    - hsr_deploy_type is defined


...
